{"function_name": "add_numbers", "prefix": "def add_numbers(a, b):\n", "middle": "# Code completion starts here\n", "suffix": "    return a + b\n"}
{"function_name": "subtract", "prefix": "def subtract(a, b):\n", "middle": "# Code completion starts here\n", "suffix": "    diff = a - b\n    return diff\n"}
{"function_name": "filter_even_numbers", "prefix": "def filter_even_numbers(numbers):\n", "middle": "# Code completion starts here\n", "suffix": "    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n"}
{"function_name": "get_square_roots", "prefix": "def get_square_roots(numbers):\n", "middle": "# Code completion starts here\n", "suffix": "\n    return [math.sqrt(n) for n in numbers if n >= 0]\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, radius):\n", "middle": "# Code completion starts here\n", "suffix": "        self.radius = radius\n"}
{"function_name": "area", "prefix": "    def area(self):\n", "middle": "# Code completion starts here\n", "suffix": "\n        return math.pi * (self.radius**2)\n"}
{"function_name": "circumference", "prefix": "    def circumference(self):\n", "middle": "# Code completion starts here\n", "suffix": "\n        return 2 * math.pi * self.radius\n"}
{"function_name": "scale", "prefix": "    def scale(self, factor):\n", "middle": "# Code completion starts here\n", "suffix": "        self.radius *= factor\n"}
{"function_name": "generate_password", "prefix": "def generate_password(length):\n", "middle": "# Code completion starts here\n", "suffix": "    all_chars = string.ascii_letters + string.digits + string.punctuation\n\n    password = \"\".join(random.choice(all_chars) for i in range(length))\n\n    return password\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, data):\n", "middle": "# Code completion starts here\n", "suffix": "        self.data = data\n        self.next = None\n"}
{"function_name": "__init__", "prefix": "    def __init__(self):\n", "middle": "# Code completion starts here\n", "suffix": "        self.head = None\n"}
{"function_name": "reverse", "prefix": "    def reverse(self):\n", "middle": "# Code completion starts here\n", "suffix": "        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n        self.head = prev\n"}
{"function_name": "push", "prefix": "    def push(self, new_data):\n", "middle": "# Code completion starts here\n", "suffix": "        new_node = Node(new_data)\n        new_node.next = self.head\n        self.head = new_node\n"}
{"function_name": "printList", "prefix": "    def printList(self):\n", "middle": "# Code completion starts here\n", "suffix": "        temp = self.head\n        while temp:\n            print(temp.data, end=\" \")\n            temp = temp.next\n"}
{"function_name": "password_checker", "prefix": "def password_checker(password):\n", "middle": "# Code completion starts here\n", "suffix": "    min_length = 8\n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n    has_special_char = False\n    special_chars = \"!@#$%^&*()-_=+[{]}\\|;:',<.>/?\"\n\n    if len(password) < min_length:\n        print(\"Password is too short!\")\n        return False\n\n    for char in password:\n        if char.isupper():\n            has_uppercase = True\n        elif char.islower():\n            has_lowercase = True\n        elif char.isdigit():\n            has_digit = True\n        elif char in special_chars:\n            has_special_char = True\n\n    if not has_uppercase:\n        print(\"Password must contain at least one uppercase letter!\")\n        return False\n    if not has_lowercase:\n        print(\"Password must contain at least one lowercase letter!\")\n        return False\n    if not has_digit:\n        print(\"Password must contain at least one digit!\")\n        return False\n    if not has_special_char:\n        print(\"Password must contain at least one special character!\")\n        return False\n\n    print(\"Password is strong!\")\n    return True\n"}
{"function_name": "Fibonacci", "prefix": "def Fibonacci(n):\n", "middle": "# Code completion starts here\n", "suffix": "    n1, n2 = 0, 1\n    count = 0\n\n    if n <= 0:\n        print(\"Please enter a positive integer\")\n    elif n == 1:\n        print(\"Fibonacci sequence upto\", n, \":\")\n        print(n1)\n    else:\n        print(\"Fibonacci sequence:\")\n        while count < n:\n            print(n1)\n            nth = n1 + n2\n            n1 = n2\n            n2 = nth\n            count += 1\n"}
{"function_name": "Binary_Search", "prefix": "def Binary_Search(Test_arr, low, high, k):\n", "middle": "# Code completion starts here\n", "suffix": "    if high >= low:\n        Mid = (low + high) // 2\n        if Test_arr[Mid] < k:\n            return Binary_Search(Test_arr, Mid + 1, high, k)\n        elif Test_arr[Mid] > k:\n            return Binary_Search(Test_arr, low, Mid - 1, k)\n        else:\n            return Mid\n    else:\n        return low\n"}
{"function_name": "Insertion_Sort", "prefix": "def Insertion_Sort(Test_arr):\n", "middle": "# Code completion starts here\n", "suffix": "    for i in range(1, len(Test_arr)):\n        val = Test_arr[i]\n        j = Binary_Search(Test_arr[:i], 0, len(Test_arr[:i]) - 1, val)\n        Test_arr.pop(i)\n        Test_arr.insert(j, val)\n    return Test_arr\n"}
{"function_name": "Bubble_Sort", "prefix": "def Bubble_Sort(list):\n", "middle": "# Code completion starts here\n", "suffix": "\n    for iter_num in range(len(list) - 1, 0, -1):\n        for idx in range(iter_num):\n            if list[idx] > list[idx + 1]:\n                temp = list[idx]\n                list[idx] = list[idx + 1]\n                list[idx + 1] = temp\n"}
