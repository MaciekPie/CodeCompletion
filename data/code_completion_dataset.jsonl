{"function_name": "add", "prefix": "def add(a, b):\n", "middle": "", "suffix": "    return a + b\n"}
{"function_name": "subtract", "prefix": "def subtract(a, b):\n", "middle": "", "suffix": "    return a - b\n"}
{"function_name": "multiply", "prefix": "def multiply(a, b):\n", "middle": "", "suffix": "    return a * b\n"}
{"function_name": "divide", "prefix": "def divide(a, b):\n", "middle": "", "suffix": "    return a / b if b != 0 else None\n"}
{"function_name": "modulus", "prefix": "def modulus(a, b):\n", "middle": "", "suffix": "    return a % b\n"}
{"function_name": "power", "prefix": "def power(base, exponent):\n", "middle": "", "suffix": "    return base**exponent\n"}
{"function_name": "is_equal", "prefix": "def is_equal(a, b):\n", "middle": "", "suffix": "    return a == b\n"}
{"function_name": "absolute_value", "prefix": "def absolute_value(x):\n", "middle": "", "suffix": "    return abs(x)\n"}
{"function_name": "ceiling", "prefix": "def ceiling(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "ceiling", "prefix": "def ceiling(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "ceiling", "prefix": "def ceiling(x):\n    import math\n\n", "middle": "", "suffix": "    return math.ceil(x)\n"}
{"function_name": "floor_value", "prefix": "def floor_value(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "floor_value", "prefix": "def floor_value(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "floor_value", "prefix": "def floor_value(x):\n    import math\n\n", "middle": "", "suffix": "    return math.floor(x)\n"}
{"function_name": "square_root", "prefix": "def square_root(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "square_root", "prefix": "def square_root(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "square_root", "prefix": "def square_root(x):\n    import math\n\n", "middle": "", "suffix": "    return math.sqrt(x)\n"}
{"function_name": "sine", "prefix": "def sine(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "sine", "prefix": "def sine(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "sine", "prefix": "def sine(x):\n    import math\n\n", "middle": "", "suffix": "    return math.sin(x)\n"}
{"function_name": "cosine", "prefix": "def cosine(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "cosine", "prefix": "def cosine(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "cosine", "prefix": "def cosine(x):\n    import math\n\n", "middle": "", "suffix": "    return math.cos(x)\n"}
{"function_name": "tangent", "prefix": "def tangent(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "tangent", "prefix": "def tangent(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "tangent", "prefix": "def tangent(x):\n    import math\n\n", "middle": "", "suffix": "    return math.tan(x)\n"}
{"function_name": "arc_sine", "prefix": "def arc_sine(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "arc_sine", "prefix": "def arc_sine(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "arc_sine", "prefix": "def arc_sine(x):\n    import math\n\n", "middle": "", "suffix": "    return math.asin(x)\n"}
{"function_name": "arc_cosine", "prefix": "def arc_cosine(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "arc_cosine", "prefix": "def arc_cosine(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "arc_cosine", "prefix": "def arc_cosine(x):\n    import math\n\n", "middle": "", "suffix": "    return math.acos(x)\n"}
{"function_name": "arc_tangent", "prefix": "def arc_tangent(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "arc_tangent", "prefix": "def arc_tangent(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "arc_tangent", "prefix": "def arc_tangent(x):\n    import math\n\n", "middle": "", "suffix": "    return math.atan(x)\n"}
{"function_name": "natural_log", "prefix": "def natural_log(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "natural_log", "prefix": "def natural_log(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "natural_log", "prefix": "def natural_log(x):\n    import math\n\n", "middle": "", "suffix": "    return math.log(x)\n"}
{"function_name": "log_base_10", "prefix": "def log_base_10(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "log_base_10", "prefix": "def log_base_10(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "log_base_10", "prefix": "def log_base_10(x):\n    import math\n\n", "middle": "", "suffix": "    return math.log10(x)\n"}
{"function_name": "exponential", "prefix": "def exponential(x):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "exponential", "prefix": "def exponential(x):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "exponential", "prefix": "def exponential(x):\n    import math\n\n", "middle": "", "suffix": "    return math.exp(x)\n"}
{"function_name": "factorial", "prefix": "def factorial(n):\n", "middle": "", "suffix": "    if n == 0:\n"}
{"function_name": "factorial", "prefix": "def factorial(n):\n    if n == 0:\n", "middle": "", "suffix": "        return 1\n"}
{"function_name": "factorial", "prefix": "def factorial(n):\n    if n == 0:\n        return 1\n", "middle": "", "suffix": "    else:\n"}
{"function_name": "factorial", "prefix": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n", "middle": "", "suffix": "        return n * factorial(n - 1)\n"}
{"function_name": "square_root", "prefix": "def square_root(x):\n", "middle": "", "suffix": "    return x**0.5\n"}
{"function_name": "absolute_value", "prefix": "def absolute_value(x):\n", "middle": "", "suffix": "    return abs(x)\n"}
{"function_name": "is_odd", "prefix": "def is_odd(x):\n", "middle": "", "suffix": "    return x % 2 == 1\n"}
{"function_name": "is_even", "prefix": "def is_even(x):\n", "middle": "", "suffix": "    return x % 2 == 0\n"}
{"function_name": "meters_to_inches", "prefix": "def meters_to_inches(val):\n", "middle": "", "suffix": "    return val * 39.37\n"}
{"function_name": "get_square_roots", "prefix": "def get_square_roots(numbers):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "get_square_roots", "prefix": "def get_square_roots(numbers):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "get_square_roots", "prefix": "def get_square_roots(numbers):\n    import math\n\n", "middle": "", "suffix": "    return [math.sqrt(n) for n in numbers if n >= 0]\n"}
{"function_name": "tri_recursion", "prefix": "def tri_recursion(k):\n", "middle": "", "suffix": "    if k > 0:\n"}
{"function_name": "tri_recursion", "prefix": "def tri_recursion(k):\n    if k > 0:\n", "middle": "", "suffix": "        result = k + tri_recursion(k - 1)\n"}
{"function_name": "tri_recursion", "prefix": "def tri_recursion(k):\n    if k > 0:\n        result = k + tri_recursion(k - 1)\n", "middle": "", "suffix": "        print(result)\n"}
{"function_name": "tri_recursion", "prefix": "def tri_recursion(k):\n    if k > 0:\n        result = k + tri_recursion(k - 1)\n        print(result)\n", "middle": "", "suffix": "    else:\n"}
{"function_name": "tri_recursion", "prefix": "def tri_recursion(k):\n    if k > 0:\n        result = k + tri_recursion(k - 1)\n        print(result)\n    else:\n", "middle": "", "suffix": "        result = 0\n"}
{"function_name": "tri_recursion", "prefix": "def tri_recursion(k):\n    if k > 0:\n        result = k + tri_recursion(k - 1)\n        print(result)\n    else:\n        result = 0\n", "middle": "", "suffix": "    return result\n"}
{"function_name": "get_lengths", "prefix": "def get_lengths(words):\n", "middle": "", "suffix": "    return map(len, words)\n"}
{"function_name": "calculate_area", "prefix": "def calculate_area(radius):\n", "middle": "", "suffix": "    import math\n"}
{"function_name": "calculate_area", "prefix": "def calculate_area(radius):\n    import math\n", "middle": "", "suffix": "\n"}
{"function_name": "calculate_area", "prefix": "def calculate_area(radius):\n    import math\n\n", "middle": "", "suffix": "    return math.pi * radius**2\n"}
{"function_name": "get_max_value", "prefix": "def get_max_value(numbers):\n", "middle": "", "suffix": "    if not numbers:\n"}
{"function_name": "get_max_value", "prefix": "def get_max_value(numbers):\n    if not numbers:\n", "middle": "", "suffix": "        return None\n"}
{"function_name": "get_max_value", "prefix": "def get_max_value(numbers):\n    if not numbers:\n        return None\n", "middle": "", "suffix": "    return max(numbers)\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, radius):\n", "middle": "", "suffix": "        self.radius = radius\n"}
{"function_name": "area", "prefix": "    def area(self):\n", "middle": "", "suffix": "        import math\n"}
{"function_name": "area", "prefix": "    def area(self):\n        import math\n", "middle": "", "suffix": "\n"}
{"function_name": "area", "prefix": "    def area(self):\n        import math\n\n", "middle": "", "suffix": "        return math.pi * (self.radius**2)\n"}
{"function_name": "circumference", "prefix": "    def circumference(self):\n", "middle": "", "suffix": "        import math\n"}
{"function_name": "circumference", "prefix": "    def circumference(self):\n        import math\n", "middle": "", "suffix": "\n"}
{"function_name": "circumference", "prefix": "    def circumference(self):\n        import math\n\n", "middle": "", "suffix": "        return 2 * math.pi * self.radius\n"}
{"function_name": "scale", "prefix": "    def scale(self, factor):\n", "middle": "", "suffix": "        self.radius *= factor\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, real, imaginary):\n", "middle": "", "suffix": "        self.real = real\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, real, imaginary):\n        self.real = real\n", "middle": "", "suffix": "        self.imaginary = imaginary\n"}
{"function_name": "get_real", "prefix": "    def get_real(self):\n", "middle": "", "suffix": "        return self.real\n"}
{"function_name": "get_imaginary", "prefix": "    def get_imaginary(self):\n", "middle": "", "suffix": "        return self.imaginary\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, l, w):\n", "middle": "", "suffix": "        self.length = l\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, l, w):\n        self.length = l\n", "middle": "", "suffix": "        self.width = w\n"}
{"function_name": "area", "prefix": "    def area(self):\n", "middle": "", "suffix": "        return self.length * self.width\n"}
{"function_name": "reverse_string", "prefix": "def reverse_string(s):\n", "middle": "", "suffix": "    return s[::-1]\n"}
{"function_name": "count_vowels", "prefix": "def count_vowels(s):\n", "middle": "", "suffix": "    vowels = \"aeiouAEIOU\"\n"}
{"function_name": "count_vowels", "prefix": "def count_vowels(s):\n    vowels = \"aeiouAEIOU\"\n", "middle": "", "suffix": "    return sum(1 for char in s if char in vowels)\n"}
{"function_name": "capitalize_words", "prefix": "def capitalize_words(sentence):\n", "middle": "", "suffix": "    return \" \".join(word.capitalize() for word in sentence.split())\n"}
{"function_name": "get_unique_elements", "prefix": "def get_unique_elements(elements):\n", "middle": "", "suffix": "    return list(set(elements))\n"}
{"function_name": "find_average", "prefix": "def find_average(numbers):\n", "middle": "", "suffix": "    return sum(numbers) / len(numbers) if numbers else 0\n"}
{"function_name": "sum_of_squares", "prefix": "def sum_of_squares(numbers):\n", "middle": "", "suffix": "    return sum(num**2 for num in numbers)\n"}
{"function_name": "remove_duplicates", "prefix": "def remove_duplicates(lst):\n", "middle": "", "suffix": "    return list(dict.fromkeys(lst))\n"}
{"function_name": "count_occurrences", "prefix": "def count_occurrences(items, target):\n", "middle": "", "suffix": "    return items.count(target)\n"}
{"function_name": "gcd", "prefix": "def gcd(a, b):\n", "middle": "", "suffix": "    while b:\n"}
{"function_name": "gcd", "prefix": "def gcd(a, b):\n    while b:\n", "middle": "", "suffix": "        a, b = b, a % b\n"}
{"function_name": "gcd", "prefix": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n", "middle": "", "suffix": "    return a\n"}
{"function_name": "lcm", "prefix": "def lcm(a, b):\n", "middle": "", "suffix": "    return abs(a * b) // gcd(a, b) if a and b else 0\n"}
{"function_name": "generate_password", "prefix": "def generate_password(length):\n", "middle": "", "suffix": "    import string\n"}
{"function_name": "generate_password", "prefix": "def generate_password(length):\n    import string\n", "middle": "", "suffix": "    import random\n"}
{"function_name": "generate_password", "prefix": "def generate_password(length):\n    import string\n    import random\n", "middle": "", "suffix": "\n"}
{"function_name": "generate_password", "prefix": "def generate_password(length):\n    import string\n    import random\n\n", "middle": "", "suffix": "    all_chars = string.ascii_letters + string.digits + string.punctuation\n"}
{"function_name": "generate_password", "prefix": "def generate_password(length):\n    import string\n    import random\n\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n", "middle": "", "suffix": "\n"}
{"function_name": "generate_password", "prefix": "def generate_password(length):\n    import string\n    import random\n\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n\n", "middle": "", "suffix": "    password = \"\".join(random.choice(all_chars) for i in range(length))\n"}
{"function_name": "generate_password", "prefix": "def generate_password(length):\n    import string\n    import random\n\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n\n    password = \"\".join(random.choice(all_chars) for i in range(length))\n", "middle": "", "suffix": "\n"}
{"function_name": "generate_password", "prefix": "def generate_password(length):\n    import string\n    import random\n\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n\n    password = \"\".join(random.choice(all_chars) for i in range(length))\n\n", "middle": "", "suffix": "    return password\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, data):\n", "middle": "", "suffix": "        self.data = data\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, data):\n        self.data = data\n", "middle": "", "suffix": "        self.next = None\n"}
{"function_name": "__init__", "prefix": "    def __init__(self):\n", "middle": "", "suffix": "        self.head = None\n"}
{"function_name": "reverse", "prefix": "    def reverse(self):\n", "middle": "", "suffix": "        prev = None\n"}
{"function_name": "reverse", "prefix": "    def reverse(self):\n        prev = None\n", "middle": "", "suffix": "        current = self.head\n"}
{"function_name": "reverse", "prefix": "    def reverse(self):\n        prev = None\n        current = self.head\n", "middle": "", "suffix": "        while current is not None:\n"}
{"function_name": "reverse", "prefix": "    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n", "middle": "", "suffix": "            next = current.next\n"}
{"function_name": "reverse", "prefix": "    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next\n", "middle": "", "suffix": "            current.next = prev\n"}
{"function_name": "reverse", "prefix": "    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next\n            current.next = prev\n", "middle": "", "suffix": "            prev = current\n"}
{"function_name": "reverse", "prefix": "    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next\n            current.next = prev\n            prev = current\n", "middle": "", "suffix": "            current = next\n"}
{"function_name": "reverse", "prefix": "    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n", "middle": "", "suffix": "        self.head = prev\n"}
{"function_name": "push", "prefix": "    def push(self, new_data):\n", "middle": "", "suffix": "        new_node = Node(new_data)\n"}
{"function_name": "push", "prefix": "    def push(self, new_data):\n        new_node = Node(new_data)\n", "middle": "", "suffix": "        new_node.next = self.head\n"}
{"function_name": "push", "prefix": "    def push(self, new_data):\n        new_node = Node(new_data)\n        new_node.next = self.head\n", "middle": "", "suffix": "        self.head = new_node\n"}
{"function_name": "printList", "prefix": "    def printList(self):\n", "middle": "", "suffix": "        temp = self.head\n"}
{"function_name": "printList", "prefix": "    def printList(self):\n        temp = self.head\n", "middle": "", "suffix": "        while temp:\n"}
{"function_name": "printList", "prefix": "    def printList(self):\n        temp = self.head\n        while temp:\n", "middle": "", "suffix": "            print(temp.data, end=\" \")\n"}
{"function_name": "printList", "prefix": "    def printList(self):\n        temp = self.head\n        while temp:\n            print(temp.data, end=\" \")\n", "middle": "", "suffix": "            temp = temp.next\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, id, price, quantity):\n", "middle": "", "suffix": "        self.id = id\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, id, price, quantity):\n        self.id = id\n", "middle": "", "suffix": "        self.price = price\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, id, price, quantity):\n        self.id = id\n        self.price = price\n", "middle": "", "suffix": "        self.quantity = quantity\n"}
{"function_name": "show_info", "prefix": "    def show_info(self):\n", "middle": "", "suffix": "        print(f\"Product ID: {self.id}\")\n"}
{"function_name": "show_info", "prefix": "    def show_info(self):\n        print(f\"Product ID: {self.id}\")\n", "middle": "", "suffix": "        print(f\"Product Price: {self.price}\")\n"}
{"function_name": "show_info", "prefix": "    def show_info(self):\n        print(f\"Product ID: {self.id}\")\n        print(f\"Product Price: {self.price}\")\n", "middle": "", "suffix": "        print(f\"Product Quantity: {self.quantity}\")\n"}
{"function_name": "edit_product", "prefix": "    def edit_product(self):\n", "middle": "", "suffix": "        self.id = int(input(\"Edit Product ID: \"))\n"}
{"function_name": "edit_product", "prefix": "    def edit_product(self):\n        self.id = int(input(\"Edit Product ID: \"))\n", "middle": "", "suffix": "        self.price = int(input(\"Edit Product Price: \"))\n"}
{"function_name": "edit_product", "prefix": "    def edit_product(self):\n        self.id = int(input(\"Edit Product ID: \"))\n        self.price = int(input(\"Edit Product Price: \"))\n", "middle": "", "suffix": "        self.quantity = int(input(\"Edit Product Quantity: \"))\n"}
{"function_name": "is_prime", "prefix": "def is_prime(n):\n", "middle": "", "suffix": "    if n <= 1:\n"}
{"function_name": "is_prime", "prefix": "def is_prime(n):\n    if n <= 1:\n", "middle": "", "suffix": "        return False\n"}
{"function_name": "is_prime", "prefix": "def is_prime(n):\n    if n <= 1:\n        return False\n", "middle": "", "suffix": "    for i in range(2, int(n**0.5) + 1):\n"}
{"function_name": "is_prime", "prefix": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n", "middle": "", "suffix": "\n"}
{"function_name": "is_prime", "prefix": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n\n", "middle": "", "suffix": "        if n % i == 0:\n"}
{"function_name": "is_prime", "prefix": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n\n        if n % i == 0:\n", "middle": "", "suffix": "            return False\n"}
{"function_name": "is_prime", "prefix": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n\n        if n % i == 0:\n            return False\n", "middle": "", "suffix": "    return True\n"}
{"function_name": "count_primes", "prefix": "def count_primes(n):\n", "middle": "", "suffix": "    count = 0\n"}
{"function_name": "count_primes", "prefix": "def count_primes(n):\n    count = 0\n", "middle": "", "suffix": "    for i in range(2, n + 1):\n"}
{"function_name": "count_primes", "prefix": "def count_primes(n):\n    count = 0\n    for i in range(2, n + 1):\n", "middle": "", "suffix": "        if is_prime(i):\n"}
{"function_name": "count_primes", "prefix": "def count_primes(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n", "middle": "", "suffix": "            count += 1\n"}
{"function_name": "count_primes", "prefix": "def count_primes(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n", "middle": "", "suffix": "    return count\n"}
{"function_name": "find_divisors", "prefix": "def find_divisors(n):\n", "middle": "", "suffix": "    divisors = []\n"}
{"function_name": "find_divisors", "prefix": "def find_divisors(n):\n    divisors = []\n", "middle": "", "suffix": "    for i in range(1, n):\n"}
{"function_name": "find_divisors", "prefix": "def find_divisors(n):\n    divisors = []\n    for i in range(1, n):\n", "middle": "", "suffix": "        if n % i == 0:\n"}
{"function_name": "find_divisors", "prefix": "def find_divisors(n):\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n", "middle": "", "suffix": "            divisors.append(i)\n"}
{"function_name": "find_divisors", "prefix": "def find_divisors(n):\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n", "middle": "", "suffix": "    return divisors\n"}
{"function_name": "mean", "prefix": "def mean(array):\n", "middle": "", "suffix": "    import numpy as np\n"}
{"function_name": "mean", "prefix": "def mean(array):\n    import numpy as np\n", "middle": "", "suffix": "\n"}
{"function_name": "mean", "prefix": "def mean(array):\n    import numpy as np\n\n", "middle": "", "suffix": "    return np.mean(array)\n"}
{"function_name": "median", "prefix": "def median(array):\n", "middle": "", "suffix": "    import numpy as np\n"}
{"function_name": "median", "prefix": "def median(array):\n    import numpy as np\n", "middle": "", "suffix": "\n"}
{"function_name": "median", "prefix": "def median(array):\n    import numpy as np\n\n", "middle": "", "suffix": "    return np.median(array)\n"}
{"function_name": "mode", "prefix": "def mode(array):\n", "middle": "", "suffix": "    from scipy import stats\n"}
{"function_name": "mode", "prefix": "def mode(array):\n    from scipy import stats\n", "middle": "", "suffix": "\n"}
{"function_name": "mode", "prefix": "def mode(array):\n    from scipy import stats\n\n", "middle": "", "suffix": "    return stats.mode(array)[0][0]\n"}
{"function_name": "standard_deviation", "prefix": "def standard_deviation(array):\n", "middle": "", "suffix": "    import numpy as np\n"}
{"function_name": "standard_deviation", "prefix": "def standard_deviation(array):\n    import numpy as np\n", "middle": "", "suffix": "\n"}
{"function_name": "standard_deviation", "prefix": "def standard_deviation(array):\n    import numpy as np\n\n", "middle": "", "suffix": "    return np.std(array)\n"}
{"function_name": "variance", "prefix": "def variance(array):\n", "middle": "", "suffix": "    import numpy as np\n"}
{"function_name": "variance", "prefix": "def variance(array):\n    import numpy as np\n", "middle": "", "suffix": "\n"}
{"function_name": "variance", "prefix": "def variance(array):\n    import numpy as np\n\n", "middle": "", "suffix": "    return np.var(array)\n"}
{"function_name": "covariance", "prefix": "def covariance(array1, array2):\n", "middle": "", "suffix": "    import numpy as np\n"}
{"function_name": "covariance", "prefix": "def covariance(array1, array2):\n    import numpy as np\n", "middle": "", "suffix": "\n"}
{"function_name": "covariance", "prefix": "def covariance(array1, array2):\n    import numpy as np\n\n", "middle": "", "suffix": "    return np.cov(array1, array2)[0, 1]\n"}
{"function_name": "correlation", "prefix": "def correlation(array1, array2):\n", "middle": "", "suffix": "    import numpy as np\n"}
{"function_name": "correlation", "prefix": "def correlation(array1, array2):\n    import numpy as np\n", "middle": "", "suffix": "\n"}
{"function_name": "correlation", "prefix": "def correlation(array1, array2):\n    import numpy as np\n\n", "middle": "", "suffix": "    return np.corrcoef(array1, array2)[0, 1]\n"}
{"function_name": "matrix_multiplication", "prefix": "def matrix_multiplication(matrix1, matrix2):\n", "middle": "", "suffix": "    import numpy as np\n"}
{"function_name": "matrix_multiplication", "prefix": "def matrix_multiplication(matrix1, matrix2):\n    import numpy as np\n", "middle": "", "suffix": "\n"}
{"function_name": "matrix_multiplication", "prefix": "def matrix_multiplication(matrix1, matrix2):\n    import numpy as np\n\n", "middle": "", "suffix": "    return np.dot(matrix1, matrix2)\n"}
{"function_name": "matrix_inverse", "prefix": "def matrix_inverse(matrix):\n", "middle": "", "suffix": "    import numpy as np\n"}
{"function_name": "matrix_inverse", "prefix": "def matrix_inverse(matrix):\n    import numpy as np\n", "middle": "", "suffix": "\n"}
{"function_name": "matrix_inverse", "prefix": "def matrix_inverse(matrix):\n    import numpy as np\n\n", "middle": "", "suffix": "    return np.linalg.inv(matrix)\n"}
{"function_name": "determinant", "prefix": "def determinant(matrix):\n", "middle": "", "suffix": "    import numpy as np\n"}
{"function_name": "determinant", "prefix": "def determinant(matrix):\n    import numpy as np\n", "middle": "", "suffix": "\n"}
{"function_name": "determinant", "prefix": "def determinant(matrix):\n    import numpy as np\n\n", "middle": "", "suffix": "    return np.linalg.det(matrix)\n"}
{"function_name": "eigenvalues_eigenvectors", "prefix": "def eigenvalues_eigenvectors(matrix):\n", "middle": "", "suffix": "    import numpy as np\n"}
{"function_name": "eigenvalues_eigenvectors", "prefix": "def eigenvalues_eigenvectors(matrix):\n    import numpy as np\n", "middle": "", "suffix": "\n"}
{"function_name": "eigenvalues_eigenvectors", "prefix": "def eigenvalues_eigenvectors(matrix):\n    import numpy as np\n\n", "middle": "", "suffix": "    return np.linalg.eig(matrix)\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n", "middle": "", "suffix": "    if not nums1 and not nums2:\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    if not nums1 and not nums2:\n", "middle": "", "suffix": "        raise ValueError(\"Both input arrays are empty.\")\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    if not nums1 and not nums2:\n        raise ValueError(\"Both input arrays are empty.\")\n", "middle": "", "suffix": "\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    if not nums1 and not nums2:\n        raise ValueError(\"Both input arrays are empty.\")\n\n", "middle": "", "suffix": "    merged = sorted(nums1 + nums2)\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    if not nums1 and not nums2:\n        raise ValueError(\"Both input arrays are empty.\")\n\n    merged = sorted(nums1 + nums2)\n", "middle": "", "suffix": "    total = len(merged)\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    if not nums1 and not nums2:\n        raise ValueError(\"Both input arrays are empty.\")\n\n    merged = sorted(nums1 + nums2)\n    total = len(merged)\n", "middle": "", "suffix": "\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    if not nums1 and not nums2:\n        raise ValueError(\"Both input arrays are empty.\")\n\n    merged = sorted(nums1 + nums2)\n    total = len(merged)\n\n", "middle": "", "suffix": "    if total % 2 == 1:\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    if not nums1 and not nums2:\n        raise ValueError(\"Both input arrays are empty.\")\n\n    merged = sorted(nums1 + nums2)\n    total = len(merged)\n\n    if total % 2 == 1:\n", "middle": "", "suffix": "        return float(merged[total // 2])\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    if not nums1 and not nums2:\n        raise ValueError(\"Both input arrays are empty.\")\n\n    merged = sorted(nums1 + nums2)\n    total = len(merged)\n\n    if total % 2 == 1:\n        return float(merged[total // 2])\n", "middle": "", "suffix": "\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    if not nums1 and not nums2:\n        raise ValueError(\"Both input arrays are empty.\")\n\n    merged = sorted(nums1 + nums2)\n    total = len(merged)\n\n    if total % 2 == 1:\n        return float(merged[total // 2])\n\n", "middle": "", "suffix": "    middle1 = merged[total // 2 - 1]\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    if not nums1 and not nums2:\n        raise ValueError(\"Both input arrays are empty.\")\n\n    merged = sorted(nums1 + nums2)\n    total = len(merged)\n\n    if total % 2 == 1:\n        return float(merged[total // 2])\n\n    middle1 = merged[total // 2 - 1]\n", "middle": "", "suffix": "    middle2 = merged[total // 2]\n"}
{"function_name": "find_median_sorted_arrays", "prefix": "def find_median_sorted_arrays(nums1: list[int], nums2: list[int]) -> float:\n    if not nums1 and not nums2:\n        raise ValueError(\"Both input arrays are empty.\")\n\n    merged = sorted(nums1 + nums2)\n    total = len(merged)\n\n    if total % 2 == 1:\n        return float(merged[total // 2])\n\n    middle1 = merged[total // 2 - 1]\n    middle2 = merged[total // 2]\n", "middle": "", "suffix": "    return (float(middle1) + float(middle2)) / 2.0\n"}
{"function_name": "euclidean_distance_sqr", "prefix": "def euclidean_distance_sqr(point1, point2):\n", "middle": "", "suffix": "    return (point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2\n"}
{"function_name": "__init__", "prefix": "    def __init__(self) -> None:\n", "middle": "", "suffix": "        self.sequence = [0, 1]\n"}
{"function_name": "get", "prefix": "    def get(self, index: int) -> list:\n", "middle": "", "suffix": "        if (difference := index - (len(self.sequence) - 2)) >= 1:\n"}
{"function_name": "get", "prefix": "    def get(self, index: int) -> list:\n        if (difference := index - (len(self.sequence) - 2)) >= 1:\n", "middle": "", "suffix": "            for _ in range(difference):\n"}
{"function_name": "get", "prefix": "    def get(self, index: int) -> list:\n        if (difference := index - (len(self.sequence) - 2)) >= 1:\n            for _ in range(difference):\n", "middle": "", "suffix": "                self.sequence.append(self.sequence[-1] + self.sequence[-2])\n"}
{"function_name": "get", "prefix": "    def get(self, index: int) -> list:\n        if (difference := index - (len(self.sequence) - 2)) >= 1:\n            for _ in range(difference):\n                self.sequence.append(self.sequence[-1] + self.sequence[-2])\n", "middle": "", "suffix": "        return self.sequence[:index]\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, array: list[int]) -> None:\n", "middle": "", "suffix": "        len_array = len(array)\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, array: list[int]) -> None:\n        len_array = len(array)\n", "middle": "", "suffix": "        self.prefix_sum = [0] * len_array\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, array: list[int]) -> None:\n        len_array = len(array)\n        self.prefix_sum = [0] * len_array\n", "middle": "", "suffix": "\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, array: list[int]) -> None:\n        len_array = len(array)\n        self.prefix_sum = [0] * len_array\n\n", "middle": "", "suffix": "        if len_array > 0:\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, array: list[int]) -> None:\n        len_array = len(array)\n        self.prefix_sum = [0] * len_array\n\n        if len_array > 0:\n", "middle": "", "suffix": "            self.prefix_sum[0] = array[0]\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, array: list[int]) -> None:\n        len_array = len(array)\n        self.prefix_sum = [0] * len_array\n\n        if len_array > 0:\n            self.prefix_sum[0] = array[0]\n", "middle": "", "suffix": "\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, array: list[int]) -> None:\n        len_array = len(array)\n        self.prefix_sum = [0] * len_array\n\n        if len_array > 0:\n            self.prefix_sum[0] = array[0]\n\n", "middle": "", "suffix": "        for i in range(1, len_array):\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, array: list[int]) -> None:\n        len_array = len(array)\n        self.prefix_sum = [0] * len_array\n\n        if len_array > 0:\n            self.prefix_sum[0] = array[0]\n\n        for i in range(1, len_array):\n", "middle": "", "suffix": "            self.prefix_sum[i] = self.prefix_sum[i - 1] + array[i]\n"}
{"function_name": "get_sum", "prefix": "    def get_sum(self, start: int, end: int) -> int:\n", "middle": "", "suffix": "        if start == 0:\n"}
{"function_name": "get_sum", "prefix": "    def get_sum(self, start: int, end: int) -> int:\n        if start == 0:\n", "middle": "", "suffix": "            return self.prefix_sum[end]\n"}
{"function_name": "get_sum", "prefix": "    def get_sum(self, start: int, end: int) -> int:\n        if start == 0:\n            return self.prefix_sum[end]\n", "middle": "", "suffix": "\n"}
{"function_name": "get_sum", "prefix": "    def get_sum(self, start: int, end: int) -> int:\n        if start == 0:\n            return self.prefix_sum[end]\n\n", "middle": "", "suffix": "        return self.prefix_sum[end] - self.prefix_sum[start - 1]\n"}
{"function_name": "contains_sum", "prefix": "    def contains_sum(self, target_sum: int) -> bool:\n", "middle": "", "suffix": "        sums = {0}\n"}
{"function_name": "contains_sum", "prefix": "    def contains_sum(self, target_sum: int) -> bool:\n        sums = {0}\n", "middle": "", "suffix": "        for sum_item in self.prefix_sum:\n"}
{"function_name": "contains_sum", "prefix": "    def contains_sum(self, target_sum: int) -> bool:\n        sums = {0}\n        for sum_item in self.prefix_sum:\n", "middle": "", "suffix": "            if sum_item - target_sum in sums:\n"}
{"function_name": "contains_sum", "prefix": "    def contains_sum(self, target_sum: int) -> bool:\n        sums = {0}\n        for sum_item in self.prefix_sum:\n            if sum_item - target_sum in sums:\n", "middle": "", "suffix": "                return True\n"}
{"function_name": "contains_sum", "prefix": "    def contains_sum(self, target_sum: int) -> bool:\n        sums = {0}\n        for sum_item in self.prefix_sum:\n            if sum_item - target_sum in sums:\n                return True\n", "middle": "", "suffix": "\n"}
{"function_name": "contains_sum", "prefix": "    def contains_sum(self, target_sum: int) -> bool:\n        sums = {0}\n        for sum_item in self.prefix_sum:\n            if sum_item - target_sum in sums:\n                return True\n\n", "middle": "", "suffix": "            sums.add(sum_item)\n"}
{"function_name": "contains_sum", "prefix": "    def contains_sum(self, target_sum: int) -> bool:\n        sums = {0}\n        for sum_item in self.prefix_sum:\n            if sum_item - target_sum in sums:\n                return True\n\n            sums.add(sum_item)\n", "middle": "", "suffix": "\n"}
{"function_name": "contains_sum", "prefix": "    def contains_sum(self, target_sum: int) -> bool:\n        sums = {0}\n        for sum_item in self.prefix_sum:\n            if sum_item - target_sum in sums:\n                return True\n\n            sums.add(sum_item)\n\n", "middle": "", "suffix": "        return False\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, n: int):\n", "middle": "", "suffix": "        self.n = n\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, n: int):\n        self.n = n\n", "middle": "", "suffix": "        self.array = [None] * self.n\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, n: int):\n        self.n = n\n        self.array = [None] * self.n\n", "middle": "", "suffix": "        self.front = 0  # index of the first element\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, n: int):\n        self.n = n\n        self.array = [None] * self.n\n        self.front = 0  # index of the first element\n", "middle": "", "suffix": "        self.rear = 0\n"}
{"function_name": "__init__", "prefix": "    def __init__(self, n: int):\n        self.n = n\n        self.array = [None] * self.n\n        self.front = 0  # index of the first element\n        self.rear = 0\n", "middle": "", "suffix": "        self.size = 0\n"}
{"function_name": "__len__", "prefix": "    def __len__(self) -> int:\n", "middle": "", "suffix": "        return self.size\n"}
{"function_name": "is_empty", "prefix": "    def is_empty(self) -> bool:\n", "middle": "", "suffix": "        return self.size == 0\n"}
{"function_name": "first", "prefix": "    def first(self):\n", "middle": "", "suffix": "        return False if self.is_empty() else self.array[self.front]\n"}
{"function_name": "enqueue", "prefix": "    def enqueue(self, data):\n", "middle": "", "suffix": "        if self.size >= self.n:\n"}
{"function_name": "enqueue", "prefix": "    def enqueue(self, data):\n        if self.size >= self.n:\n", "middle": "", "suffix": "            raise Exception(\"QUEUE IS FULL\")\n"}
{"function_name": "enqueue", "prefix": "    def enqueue(self, data):\n        if self.size >= self.n:\n            raise Exception(\"QUEUE IS FULL\")\n", "middle": "", "suffix": "\n"}
{"function_name": "enqueue", "prefix": "    def enqueue(self, data):\n        if self.size >= self.n:\n            raise Exception(\"QUEUE IS FULL\")\n\n", "middle": "", "suffix": "        self.array[self.rear] = data\n"}
{"function_name": "enqueue", "prefix": "    def enqueue(self, data):\n        if self.size >= self.n:\n            raise Exception(\"QUEUE IS FULL\")\n\n        self.array[self.rear] = data\n", "middle": "", "suffix": "        self.rear = (self.rear + 1) % self.n\n"}
{"function_name": "enqueue", "prefix": "    def enqueue(self, data):\n        if self.size >= self.n:\n            raise Exception(\"QUEUE IS FULL\")\n\n        self.array[self.rear] = data\n        self.rear = (self.rear + 1) % self.n\n", "middle": "", "suffix": "        self.size += 1\n"}
{"function_name": "enqueue", "prefix": "    def enqueue(self, data):\n        if self.size >= self.n:\n            raise Exception(\"QUEUE IS FULL\")\n\n        self.array[self.rear] = data\n        self.rear = (self.rear + 1) % self.n\n        self.size += 1\n", "middle": "", "suffix": "        return self\n"}
{"function_name": "dequeue", "prefix": "    def dequeue(self):\n", "middle": "", "suffix": "        if self.size == 0:\n"}
{"function_name": "dequeue", "prefix": "    def dequeue(self):\n        if self.size == 0:\n", "middle": "", "suffix": "            raise Exception(\"UNDERFLOW\")\n"}
{"function_name": "dequeue", "prefix": "    def dequeue(self):\n        if self.size == 0:\n            raise Exception(\"UNDERFLOW\")\n", "middle": "", "suffix": "\n"}
{"function_name": "dequeue", "prefix": "    def dequeue(self):\n        if self.size == 0:\n            raise Exception(\"UNDERFLOW\")\n\n", "middle": "", "suffix": "        temp = self.array[self.front]\n"}
{"function_name": "dequeue", "prefix": "    def dequeue(self):\n        if self.size == 0:\n            raise Exception(\"UNDERFLOW\")\n\n        temp = self.array[self.front]\n", "middle": "", "suffix": "        self.array[self.front] = None\n"}
{"function_name": "dequeue", "prefix": "    def dequeue(self):\n        if self.size == 0:\n            raise Exception(\"UNDERFLOW\")\n\n        temp = self.array[self.front]\n        self.array[self.front] = None\n", "middle": "", "suffix": "        self.front = (self.front + 1) % self.n\n"}
{"function_name": "dequeue", "prefix": "    def dequeue(self):\n        if self.size == 0:\n            raise Exception(\"UNDERFLOW\")\n\n        temp = self.array[self.front]\n        self.array[self.front] = None\n        self.front = (self.front + 1) % self.n\n", "middle": "", "suffix": "        self.size -= 1\n"}
{"function_name": "dequeue", "prefix": "    def dequeue(self):\n        if self.size == 0:\n            raise Exception(\"UNDERFLOW\")\n\n        temp = self.array[self.front]\n        self.array[self.front] = None\n        self.front = (self.front + 1) % self.n\n        self.size -= 1\n", "middle": "", "suffix": "        return temp\n"}
{"function_name": "binary_search", "prefix": "def binary_search(Test_arr, low, high, k):\n", "middle": "", "suffix": "    if high >= low:\n"}
{"function_name": "binary_search", "prefix": "def binary_search(Test_arr, low, high, k):\n    if high >= low:\n", "middle": "", "suffix": "        Mid = (low + high) // 2\n"}
{"function_name": "binary_search", "prefix": "def binary_search(Test_arr, low, high, k):\n    if high >= low:\n        Mid = (low + high) // 2\n", "middle": "", "suffix": "        if Test_arr[Mid] < k:\n"}
{"function_name": "binary_search", "prefix": "def binary_search(Test_arr, low, high, k):\n    if high >= low:\n        Mid = (low + high) // 2\n        if Test_arr[Mid] < k:\n", "middle": "", "suffix": "            return binary_search(Test_arr, Mid + 1, high, k)\n"}
{"function_name": "binary_search", "prefix": "def binary_search(Test_arr, low, high, k):\n    if high >= low:\n        Mid = (low + high) // 2\n        if Test_arr[Mid] < k:\n            return binary_search(Test_arr, Mid + 1, high, k)\n", "middle": "", "suffix": "        elif Test_arr[Mid] > k:\n"}
{"function_name": "binary_search", "prefix": "def binary_search(Test_arr, low, high, k):\n    if high >= low:\n        Mid = (low + high) // 2\n        if Test_arr[Mid] < k:\n            return binary_search(Test_arr, Mid + 1, high, k)\n        elif Test_arr[Mid] > k:\n", "middle": "", "suffix": "            return binary_search(Test_arr, low, Mid - 1, k)\n"}
{"function_name": "binary_search", "prefix": "def binary_search(Test_arr, low, high, k):\n    if high >= low:\n        Mid = (low + high) // 2\n        if Test_arr[Mid] < k:\n            return binary_search(Test_arr, Mid + 1, high, k)\n        elif Test_arr[Mid] > k:\n            return binary_search(Test_arr, low, Mid - 1, k)\n", "middle": "", "suffix": "        else:\n"}
{"function_name": "binary_search", "prefix": "def binary_search(Test_arr, low, high, k):\n    if high >= low:\n        Mid = (low + high) // 2\n        if Test_arr[Mid] < k:\n            return binary_search(Test_arr, Mid + 1, high, k)\n        elif Test_arr[Mid] > k:\n            return binary_search(Test_arr, low, Mid - 1, k)\n        else:\n", "middle": "", "suffix": "            return Mid\n"}
{"function_name": "binary_search", "prefix": "def binary_search(Test_arr, low, high, k):\n    if high >= low:\n        Mid = (low + high) // 2\n        if Test_arr[Mid] < k:\n            return binary_search(Test_arr, Mid + 1, high, k)\n        elif Test_arr[Mid] > k:\n            return binary_search(Test_arr, low, Mid - 1, k)\n        else:\n            return Mid\n", "middle": "", "suffix": "    else:\n"}
{"function_name": "binary_search", "prefix": "def binary_search(Test_arr, low, high, k):\n    if high >= low:\n        Mid = (low + high) // 2\n        if Test_arr[Mid] < k:\n            return binary_search(Test_arr, Mid + 1, high, k)\n        elif Test_arr[Mid] > k:\n            return binary_search(Test_arr, low, Mid - 1, k)\n        else:\n            return Mid\n    else:\n", "middle": "", "suffix": "        return low\n"}
{"function_name": "bubble_sort", "prefix": "def bubble_sort(list):\n", "middle": "", "suffix": "    for iter_num in range(len(list) - 1, 0, -1):\n"}
{"function_name": "bubble_sort", "prefix": "def bubble_sort(list):\n    for iter_num in range(len(list) - 1, 0, -1):\n", "middle": "", "suffix": "        for idx in range(iter_num):\n"}
{"function_name": "bubble_sort", "prefix": "def bubble_sort(list):\n    for iter_num in range(len(list) - 1, 0, -1):\n        for idx in range(iter_num):\n", "middle": "", "suffix": "            if list[idx] > list[idx + 1]:\n"}
{"function_name": "bubble_sort", "prefix": "def bubble_sort(list):\n    for iter_num in range(len(list) - 1, 0, -1):\n        for idx in range(iter_num):\n            if list[idx] > list[idx + 1]:\n", "middle": "", "suffix": "                temp = list[idx]\n"}
{"function_name": "bubble_sort", "prefix": "def bubble_sort(list):\n    for iter_num in range(len(list) - 1, 0, -1):\n        for idx in range(iter_num):\n            if list[idx] > list[idx + 1]:\n                temp = list[idx]\n", "middle": "", "suffix": "                list[idx] = list[idx + 1]\n"}
{"function_name": "bubble_sort", "prefix": "def bubble_sort(list):\n    for iter_num in range(len(list) - 1, 0, -1):\n        for idx in range(iter_num):\n            if list[idx] > list[idx + 1]:\n                temp = list[idx]\n                list[idx] = list[idx + 1]\n", "middle": "", "suffix": "                list[idx + 1] = temp\n"}
{"function_name": "bogo_sort", "prefix": "def bogo_sort(collection):\n", "middle": "", "suffix": "    import random\n"}
{"function_name": "bogo_sort", "prefix": "def bogo_sort(collection):\n    import random\n", "middle": "", "suffix": "\n"}
{"function_name": "bogo_sort", "prefix": "def bogo_sort(collection):\n    import random\n\n", "middle": "", "suffix": "    def is_sorted(collection):\n"}
{"function_name": "bogo_sort", "prefix": "def bogo_sort(collection):\n    import random\n\n    def is_sorted(collection):\n", "middle": "", "suffix": "        for i in range(len(collection) - 1):\n"}
{"function_name": "bogo_sort", "prefix": "def bogo_sort(collection):\n    import random\n\n    def is_sorted(collection):\n        for i in range(len(collection) - 1):\n", "middle": "", "suffix": "            if collection[i] > collection[i + 1]:\n"}
{"function_name": "bogo_sort", "prefix": "def bogo_sort(collection):\n    import random\n\n    def is_sorted(collection):\n        for i in range(len(collection) - 1):\n            if collection[i] > collection[i + 1]:\n", "middle": "", "suffix": "                return False\n"}
{"function_name": "bogo_sort", "prefix": "def bogo_sort(collection):\n    import random\n\n    def is_sorted(collection):\n        for i in range(len(collection) - 1):\n            if collection[i] > collection[i + 1]:\n                return False\n", "middle": "", "suffix": "        return True\n"}
{"function_name": "bogo_sort", "prefix": "def bogo_sort(collection):\n    import random\n\n    def is_sorted(collection):\n        for i in range(len(collection) - 1):\n            if collection[i] > collection[i + 1]:\n                return False\n        return True\n", "middle": "", "suffix": "\n"}
{"function_name": "bogo_sort", "prefix": "def bogo_sort(collection):\n    import random\n\n    def is_sorted(collection):\n        for i in range(len(collection) - 1):\n            if collection[i] > collection[i + 1]:\n                return False\n        return True\n\n", "middle": "", "suffix": "    while not is_sorted(collection):\n"}
{"function_name": "bogo_sort", "prefix": "def bogo_sort(collection):\n    import random\n\n    def is_sorted(collection):\n        for i in range(len(collection) - 1):\n            if collection[i] > collection[i + 1]:\n                return False\n        return True\n\n    while not is_sorted(collection):\n", "middle": "", "suffix": "        random.shuffle(collection)\n"}
{"function_name": "bogo_sort", "prefix": "def bogo_sort(collection):\n    import random\n\n    def is_sorted(collection):\n        for i in range(len(collection) - 1):\n            if collection[i] > collection[i + 1]:\n                return False\n        return True\n\n    while not is_sorted(collection):\n        random.shuffle(collection)\n", "middle": "", "suffix": "    return collection\n"}
{"function_name": "bead_sort", "prefix": "def bead_sort(sequence):\n", "middle": "", "suffix": "    if any(not isinstance(x, int) or x < 0 for x in sequence):\n"}
{"function_name": "bead_sort", "prefix": "def bead_sort(sequence):\n    if any(not isinstance(x, int) or x < 0 for x in sequence):\n", "middle": "", "suffix": "        raise TypeError(\"Sequence must be list of non-negative integers\")\n"}
{"function_name": "bead_sort", "prefix": "def bead_sort(sequence):\n    if any(not isinstance(x, int) or x < 0 for x in sequence):\n        raise TypeError(\"Sequence must be list of non-negative integers\")\n", "middle": "", "suffix": "    for _ in range(len(sequence)):\n"}
{"function_name": "bead_sort", "prefix": "def bead_sort(sequence):\n    if any(not isinstance(x, int) or x < 0 for x in sequence):\n        raise TypeError(\"Sequence must be list of non-negative integers\")\n    for _ in range(len(sequence)):\n", "middle": "", "suffix": "        for i, (rod_upper, rod_lower) in enumerate(zip(sequence, sequence[1:])):\n"}
{"function_name": "bead_sort", "prefix": "def bead_sort(sequence):\n    if any(not isinstance(x, int) or x < 0 for x in sequence):\n        raise TypeError(\"Sequence must be list of non-negative integers\")\n    for _ in range(len(sequence)):\n        for i, (rod_upper, rod_lower) in enumerate(zip(sequence, sequence[1:])):\n", "middle": "", "suffix": "            if rod_upper > rod_lower:\n"}
{"function_name": "bead_sort", "prefix": "def bead_sort(sequence):\n    if any(not isinstance(x, int) or x < 0 for x in sequence):\n        raise TypeError(\"Sequence must be list of non-negative integers\")\n    for _ in range(len(sequence)):\n        for i, (rod_upper, rod_lower) in enumerate(zip(sequence, sequence[1:])):\n            if rod_upper > rod_lower:\n", "middle": "", "suffix": "                sequence[i] -= rod_upper - rod_lower\n"}
{"function_name": "bead_sort", "prefix": "def bead_sort(sequence):\n    if any(not isinstance(x, int) or x < 0 for x in sequence):\n        raise TypeError(\"Sequence must be list of non-negative integers\")\n    for _ in range(len(sequence)):\n        for i, (rod_upper, rod_lower) in enumerate(zip(sequence, sequence[1:])):\n            if rod_upper > rod_lower:\n                sequence[i] -= rod_upper - rod_lower\n", "middle": "", "suffix": "                sequence[i + 1] += rod_upper - rod_lower\n"}
{"function_name": "bead_sort", "prefix": "def bead_sort(sequence):\n    if any(not isinstance(x, int) or x < 0 for x in sequence):\n        raise TypeError(\"Sequence must be list of non-negative integers\")\n    for _ in range(len(sequence)):\n        for i, (rod_upper, rod_lower) in enumerate(zip(sequence, sequence[1:])):\n            if rod_upper > rod_lower:\n                sequence[i] -= rod_upper - rod_lower\n                sequence[i + 1] += rod_upper - rod_lower\n", "middle": "", "suffix": "    return sequence\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n", "middle": "", "suffix": "    n = len(collection)\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n", "middle": "", "suffix": "    for i in range(1, n):\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n", "middle": "", "suffix": "        value_to_insert = collection[i]\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n", "middle": "", "suffix": "        low = 0\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n", "middle": "", "suffix": "        high = i - 1\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n        high = i - 1\n", "middle": "", "suffix": "\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n        high = i - 1\n\n", "middle": "", "suffix": "        while low <= high:\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n        high = i - 1\n\n        while low <= high:\n", "middle": "", "suffix": "            mid = (low + high) // 2\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n        high = i - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n", "middle": "", "suffix": "            if value_to_insert < collection[mid]:\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n        high = i - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if value_to_insert < collection[mid]:\n", "middle": "", "suffix": "                high = mid - 1\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n        high = i - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if value_to_insert < collection[mid]:\n                high = mid - 1\n", "middle": "", "suffix": "            else:\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n        high = i - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if value_to_insert < collection[mid]:\n                high = mid - 1\n            else:\n", "middle": "", "suffix": "                low = mid + 1\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n        high = i - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if value_to_insert < collection[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n", "middle": "", "suffix": "        for j in range(i, low, -1):\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n        high = i - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if value_to_insert < collection[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        for j in range(i, low, -1):\n", "middle": "", "suffix": "            collection[j] = collection[j - 1]\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n        high = i - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if value_to_insert < collection[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        for j in range(i, low, -1):\n            collection[j] = collection[j - 1]\n", "middle": "", "suffix": "        collection[low] = value_to_insert\n"}
{"function_name": "binary_insertion_sort", "prefix": "def binary_insertion_sort(collection):\n    n = len(collection)\n    for i in range(1, n):\n        value_to_insert = collection[i]\n        low = 0\n        high = i - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if value_to_insert < collection[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        for j in range(i, low, -1):\n            collection[j] = collection[j - 1]\n        collection[low] = value_to_insert\n", "middle": "", "suffix": "    return collection\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n", "middle": "", "suffix": "    shrink_factor = 1.3\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n", "middle": "", "suffix": "    gap = len(data)\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n", "middle": "", "suffix": "    completed = False\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n", "middle": "", "suffix": "\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n", "middle": "", "suffix": "    while not completed:\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n", "middle": "", "suffix": "        gap = int(gap / shrink_factor)\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n", "middle": "", "suffix": "        if gap <= 1:\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n", "middle": "", "suffix": "            completed = True\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            completed = True\n", "middle": "", "suffix": "\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            completed = True\n\n", "middle": "", "suffix": "        index = 0\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            completed = True\n\n        index = 0\n", "middle": "", "suffix": "        while index + gap < len(data):\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            completed = True\n\n        index = 0\n        while index + gap < len(data):\n", "middle": "", "suffix": "            if data[index] > data[index + gap]:\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            completed = True\n\n        index = 0\n        while index + gap < len(data):\n            if data[index] > data[index + gap]:\n", "middle": "", "suffix": "                # Swap values\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            completed = True\n\n        index = 0\n        while index + gap < len(data):\n            if data[index] > data[index + gap]:\n                # Swap values\n", "middle": "", "suffix": "                data[index], data[index + gap] = data[index + gap], data[index]\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            completed = True\n\n        index = 0\n        while index + gap < len(data):\n            if data[index] > data[index + gap]:\n                # Swap values\n                data[index], data[index + gap] = data[index + gap], data[index]\n", "middle": "", "suffix": "                completed = False\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            completed = True\n\n        index = 0\n        while index + gap < len(data):\n            if data[index] > data[index + gap]:\n                # Swap values\n                data[index], data[index + gap] = data[index + gap], data[index]\n                completed = False\n", "middle": "", "suffix": "            index += 1\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            completed = True\n\n        index = 0\n        while index + gap < len(data):\n            if data[index] > data[index + gap]:\n                # Swap values\n                data[index], data[index + gap] = data[index + gap], data[index]\n                completed = False\n            index += 1\n", "middle": "", "suffix": "\n"}
{"function_name": "comb_sort", "prefix": "def comb_sort(data):\n    shrink_factor = 1.3\n    gap = len(data)\n    completed = False\n\n    while not completed:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            completed = True\n\n        index = 0\n        while index + gap < len(data):\n            if data[index] > data[index + gap]:\n                # Swap values\n                data[index], data[index + gap] = data[index + gap], data[index]\n                completed = False\n            index += 1\n\n", "middle": "", "suffix": "    return data\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n", "middle": "", "suffix": "    from random import randrange\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n    from random import randrange\n", "middle": "", "suffix": "\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n    from random import randrange\n\n", "middle": "", "suffix": "    if len(collection) < 2:\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n    from random import randrange\n\n    if len(collection) < 2:\n", "middle": "", "suffix": "        return collection\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n    from random import randrange\n\n    if len(collection) < 2:\n        return collection\n", "middle": "", "suffix": "\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n    from random import randrange\n\n    if len(collection) < 2:\n        return collection\n\n", "middle": "", "suffix": "    pivot_index = randrange(len(collection))\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n    from random import randrange\n\n    if len(collection) < 2:\n        return collection\n\n    pivot_index = randrange(len(collection))\n", "middle": "", "suffix": "    pivot = collection.pop(pivot_index)\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n    from random import randrange\n\n    if len(collection) < 2:\n        return collection\n\n    pivot_index = randrange(len(collection))\n    pivot = collection.pop(pivot_index)\n", "middle": "", "suffix": "\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n    from random import randrange\n\n    if len(collection) < 2:\n        return collection\n\n    pivot_index = randrange(len(collection))\n    pivot = collection.pop(pivot_index)\n\n", "middle": "", "suffix": "    lesser = [item for item in collection if item <= pivot]\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n    from random import randrange\n\n    if len(collection) < 2:\n        return collection\n\n    pivot_index = randrange(len(collection))\n    pivot = collection.pop(pivot_index)\n\n    lesser = [item for item in collection if item <= pivot]\n", "middle": "", "suffix": "    greater = [item for item in collection if item > pivot]\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n    from random import randrange\n\n    if len(collection) < 2:\n        return collection\n\n    pivot_index = randrange(len(collection))\n    pivot = collection.pop(pivot_index)\n\n    lesser = [item for item in collection if item <= pivot]\n    greater = [item for item in collection if item > pivot]\n", "middle": "", "suffix": "\n"}
{"function_name": "quick_sort", "prefix": "def quick_sort(collection):\n    from random import randrange\n\n    if len(collection) < 2:\n        return collection\n\n    pivot_index = randrange(len(collection))\n    pivot = collection.pop(pivot_index)\n\n    lesser = [item for item in collection if item <= pivot]\n    greater = [item for item in collection if item > pivot]\n\n", "middle": "", "suffix": "    return [*quick_sort(lesser), pivot, *quick_sort(greater)]\n"}
{"function_name": "column_based_sort", "prefix": "def column_based_sort(array, column=0):\n", "middle": "", "suffix": "    return sorted(array, key=lambda x: x[column])\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n", "middle": "", "suffix": "    array_length = len(array)\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n", "middle": "", "suffix": "    if array_length <= 1:\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n", "middle": "", "suffix": "        return array\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n", "middle": "", "suffix": "    pivot = array[0]\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n", "middle": "", "suffix": "    is_found = False\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n", "middle": "", "suffix": "    i = 1\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n", "middle": "", "suffix": "    longest_subseq: list[int] = []\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n", "middle": "", "suffix": "    while not is_found and i < array_length:\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n", "middle": "", "suffix": "        if array[i] < pivot:\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n", "middle": "", "suffix": "            is_found = True\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n", "middle": "", "suffix": "            temp_array = [element for element in array[i:] if element >= array[i]]\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n", "middle": "", "suffix": "            temp_array = longest_subsequence(temp_array)\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n", "middle": "", "suffix": "            if len(temp_array) > len(longest_subseq):\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            if len(temp_array) > len(longest_subseq):\n", "middle": "", "suffix": "                longest_subseq = temp_array\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            if len(temp_array) > len(longest_subseq):\n                longest_subseq = temp_array\n", "middle": "", "suffix": "        else:\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            if len(temp_array) > len(longest_subseq):\n                longest_subseq = temp_array\n        else:\n", "middle": "", "suffix": "            i += 1\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            if len(temp_array) > len(longest_subseq):\n                longest_subseq = temp_array\n        else:\n            i += 1\n", "middle": "", "suffix": "\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            if len(temp_array) > len(longest_subseq):\n                longest_subseq = temp_array\n        else:\n            i += 1\n\n", "middle": "", "suffix": "    temp_array = [element for element in array[1:] if element >= pivot]\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            if len(temp_array) > len(longest_subseq):\n                longest_subseq = temp_array\n        else:\n            i += 1\n\n    temp_array = [element for element in array[1:] if element >= pivot]\n", "middle": "", "suffix": "    temp_array = [pivot, *longest_subsequence(temp_array)]\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            if len(temp_array) > len(longest_subseq):\n                longest_subseq = temp_array\n        else:\n            i += 1\n\n    temp_array = [element for element in array[1:] if element >= pivot]\n    temp_array = [pivot, *longest_subsequence(temp_array)]\n", "middle": "", "suffix": "    if len(temp_array) > len(longest_subseq):\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            if len(temp_array) > len(longest_subseq):\n                longest_subseq = temp_array\n        else:\n            i += 1\n\n    temp_array = [element for element in array[1:] if element >= pivot]\n    temp_array = [pivot, *longest_subsequence(temp_array)]\n    if len(temp_array) > len(longest_subseq):\n", "middle": "", "suffix": "        return temp_array\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            if len(temp_array) > len(longest_subseq):\n                longest_subseq = temp_array\n        else:\n            i += 1\n\n    temp_array = [element for element in array[1:] if element >= pivot]\n    temp_array = [pivot, *longest_subsequence(temp_array)]\n    if len(temp_array) > len(longest_subseq):\n        return temp_array\n", "middle": "", "suffix": "    else:\n"}
{"function_name": "longest_subsequence", "prefix": "def longest_subsequence(array):\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: list[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            if len(temp_array) > len(longest_subseq):\n                longest_subseq = temp_array\n        else:\n            i += 1\n\n    temp_array = [element for element in array[1:] if element >= pivot]\n    temp_array = [pivot, *longest_subsequence(temp_array)]\n    if len(temp_array) > len(longest_subseq):\n        return temp_array\n    else:\n", "middle": "", "suffix": "        return longest_subseq\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n", "middle": "", "suffix": "    if not (isinstance(text1, str) and isinstance(text2, str)):\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n", "middle": "", "suffix": "        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n", "middle": "", "suffix": "\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n", "middle": "", "suffix": "    text1_length = len(text1)\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n", "middle": "", "suffix": "    text2_length = len(text2)\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n", "middle": "", "suffix": "\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n", "middle": "", "suffix": "    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n", "middle": "", "suffix": "    ans_index = 0\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n    ans_index = 0\n", "middle": "", "suffix": "    ans_length = 0\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n    ans_index = 0\n    ans_length = 0\n", "middle": "", "suffix": "\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n    ans_index = 0\n    ans_length = 0\n\n", "middle": "", "suffix": "    for i in range(1, text1_length + 1):\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n    ans_index = 0\n    ans_length = 0\n\n    for i in range(1, text1_length + 1):\n", "middle": "", "suffix": "        for j in range(1, text2_length + 1):\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n    ans_index = 0\n    ans_length = 0\n\n    for i in range(1, text1_length + 1):\n        for j in range(1, text2_length + 1):\n", "middle": "", "suffix": "            if text1[i - 1] == text2[j - 1]:\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n    ans_index = 0\n    ans_length = 0\n\n    for i in range(1, text1_length + 1):\n        for j in range(1, text2_length + 1):\n            if text1[i - 1] == text2[j - 1]:\n", "middle": "", "suffix": "                dp[i][j] = 1 + dp[i - 1][j - 1]\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n    ans_index = 0\n    ans_length = 0\n\n    for i in range(1, text1_length + 1):\n        for j in range(1, text2_length + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n", "middle": "", "suffix": "                if dp[i][j] > ans_length:\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n    ans_index = 0\n    ans_length = 0\n\n    for i in range(1, text1_length + 1):\n        for j in range(1, text2_length + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n                if dp[i][j] > ans_length:\n", "middle": "", "suffix": "                    ans_index = i\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n    ans_index = 0\n    ans_length = 0\n\n    for i in range(1, text1_length + 1):\n        for j in range(1, text2_length + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n                if dp[i][j] > ans_length:\n                    ans_index = i\n", "middle": "", "suffix": "                    ans_length = dp[i][j]\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n    ans_index = 0\n    ans_length = 0\n\n    for i in range(1, text1_length + 1):\n        for j in range(1, text2_length + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n                if dp[i][j] > ans_length:\n                    ans_index = i\n                    ans_length = dp[i][j]\n", "middle": "", "suffix": "\n"}
{"function_name": "longest_common_substring", "prefix": "def longest_common_substring(text1, text2):\n    if not (isinstance(text1, str) and isinstance(text2, str)):\n        raise ValueError(\"longest_common_substring() takes two strings for inputs\")\n\n    text1_length = len(text1)\n    text2_length = len(text2)\n\n    dp = [[0] * (text2_length + 1) for _ in range(text1_length + 1)]\n    ans_index = 0\n    ans_length = 0\n\n    for i in range(1, text1_length + 1):\n        for j in range(1, text2_length + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n                if dp[i][j] > ans_length:\n                    ans_index = i\n                    ans_length = dp[i][j]\n\n", "middle": "", "suffix": "    return text1[ans_index - ans_length : ans_index]\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n", "middle": "", "suffix": "    n = len(input_string)\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n", "middle": "", "suffix": "    rev = input_string[::-1]\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n", "middle": "", "suffix": "    m = len(rev)\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n", "middle": "", "suffix": "    dp = [[-1] * (m + 1) for i in range(n + 1)]\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n", "middle": "", "suffix": "    for i in range(n + 1):\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n", "middle": "", "suffix": "        dp[i][0] = 0\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n", "middle": "", "suffix": "    for i in range(m + 1):\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n", "middle": "", "suffix": "        dp[0][i] = 0\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n        dp[0][i] = 0\n", "middle": "", "suffix": "\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n        dp[0][i] = 0\n\n", "middle": "", "suffix": "    for i in range(1, n + 1):\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n        dp[0][i] = 0\n\n    for i in range(1, n + 1):\n", "middle": "", "suffix": "        for j in range(1, m + 1):\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n        dp[0][i] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n", "middle": "", "suffix": "            if input_string[i - 1] == rev[j - 1]:\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n        dp[0][i] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if input_string[i - 1] == rev[j - 1]:\n", "middle": "", "suffix": "                dp[i][j] = 1 + dp[i - 1][j - 1]\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n        dp[0][i] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if input_string[i - 1] == rev[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n", "middle": "", "suffix": "            else:\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n        dp[0][i] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if input_string[i - 1] == rev[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n", "middle": "", "suffix": "                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n        dp[0][i] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if input_string[i - 1] == rev[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n", "middle": "", "suffix": "\n"}
{"function_name": "longest_palindromic_subsequence", "prefix": "def longest_palindromic_subsequence(input_string):\n    n = len(input_string)\n    rev = input_string[::-1]\n    m = len(rev)\n    dp = [[-1] * (m + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(m + 1):\n        dp[0][i] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if input_string[i - 1] == rev[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n", "middle": "", "suffix": "    return dp[n][m]\n"}
{"function_name": "is_sorted", "prefix": "    def is_sorted(collection):\n", "middle": "", "suffix": "        for i in range(len(collection) - 1):\n"}
{"function_name": "is_sorted", "prefix": "    def is_sorted(collection):\n        for i in range(len(collection) - 1):\n", "middle": "", "suffix": "            if collection[i] > collection[i + 1]:\n"}
{"function_name": "is_sorted", "prefix": "    def is_sorted(collection):\n        for i in range(len(collection) - 1):\n            if collection[i] > collection[i + 1]:\n", "middle": "", "suffix": "                return False\n"}
{"function_name": "is_sorted", "prefix": "    def is_sorted(collection):\n        for i in range(len(collection) - 1):\n            if collection[i] > collection[i + 1]:\n                return False\n", "middle": "", "suffix": "        return True\n"}
